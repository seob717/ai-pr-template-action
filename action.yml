name: 'AI PR Template Generator'
description: 'Automatically generate and fill PR templates using AI providers based on git diff analysis'
author: 'seob717'

inputs:
  ai-provider:
    description: 'AI provider to use (claude, openai, google, vertex-ai, groq, huggingface)'
    required: false
    default: 'claude'
  api-key:
    description: 'API key for the selected AI provider'
    required: false
  anthropic-api-key:
    description: 'Anthropic API key for Claude (deprecated, use api-key)'
    required: false
  openai-api-key:
    description: 'OpenAI API key (deprecated, use api-key)'
    required: false
  google-api-key:
    description: 'Google API key for Gemini (deprecated, use api-key)'
    required: false
  vertex-ai-api-key:
    description: 'Google Vertex AI API key (deprecated, use api-key)'
    required: false
  github-token:
    description: 'GitHub token for PR operations'
    required: true
    default: ${{ github.token }}
  template-path:
    description: 'Path to PR templates directory relative to repository root'
    required: false
    default: '.github/ai-pr/templates'
  default-template:
    description: 'Default template to use when auto-selection fails'
    required: false
    default: 'feature'
  model:
    description: 'Specific model to use. Enterprise models: gemini-1.5-pro, claude-3-5-sonnet-20241022, gpt-4o. Free models: gemini-1.5-flash, gpt-4o-mini, llama-3.1-8b-instant'
    required: false
  project-id:
    description: 'Google Cloud Project ID (required for Vertex AI)'
    required: false
  location:
    description: 'Google Cloud location/region (default: us-central1)'
    required: false
    default: 'us-central1'
  update-mode:
    description: 'When to update PR body: always, create-only, comment-only'
    required: false
    default: 'create-only'

outputs:
  template-used:
    description: 'The template that was selected and used'
    value: ${{ steps.generate.outputs.template-used }}
  content-generated:
    description: 'Whether AI content was successfully generated (true/false)'
    value: ${{ steps.generate.outputs.content-generated }}
  should-update-body:
    description: 'Whether PR body should be updated based on update-mode'
    value: ${{ steps.generate.outputs.should-update-body }}

runs:
  using: 'composite'
  steps:
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install dependencies
      shell: bash
      run: |
        cd ${{ github.action_path }}
        npm install --production
        npm install openai @google/generative-ai groq-sdk
        
    - name: Generate PR Template
      shell: bash
      id: generate
      env:
        AI_PROVIDER: ${{ inputs.ai-provider }}
        API_KEY: ${{ inputs.api-key }}
        ANTHROPIC_API_KEY: ${{ inputs.anthropic-api-key }}
        OPENAI_API_KEY: ${{ inputs.openai-api-key }}
        GOOGLE_API_KEY: ${{ inputs.google-api-key }}
        VERTEX_AI_API_KEY: ${{ inputs.vertex-ai-api-key }}
        MODEL: ${{ inputs.model }}
        PROJECT_ID: ${{ inputs.project-id }}
        LOCATION: ${{ inputs.location }}
        GITHUB_TOKEN: ${{ inputs.github-token }}
        TEMPLATE_PATH: ${{ inputs.template-path }}
        DEFAULT_TEMPLATE: ${{ inputs.default-template }}
        UPDATE_MODE: ${{ inputs.update-mode }}
        PR_NUMBER: ${{ github.event.pull_request.number }}
      run: |
        node ${{ github.action_path }}/pr-template-generator.js
        
    - name: Update PR Description
      if: steps.generate.outputs.content-generated == 'true' && steps.generate.outputs.should-update-body == 'true'
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}
        PR_NUMBER: ${{ github.event.pull_request.number }}
      run: |
        if [ -f pr-template-output.md ]; then
          # Escape special characters for JSON
          TEMPLATE_CONTENT=$(cat pr-template-output.md | jq -Rs .)
          
          # Update PR description using GitHub API
          curl -X PATCH \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            "$GITHUB_API_URL/repos/$GITHUB_REPOSITORY/pulls/$PR_NUMBER" \
            -d "{\"body\": $TEMPLATE_CONTENT}"
            
          echo "âœ… PR description updated with AI-generated template"
        fi
        
    - name: Add Success Comment
      if: steps.generate.outputs.content-generated == 'true'
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}
        PR_NUMBER: ${{ github.event.pull_request.number }}
      run: |
        COMMENT_BODY="ðŸŽ‰ **PR Template Generated!**
        
        I've automatically filled out your PR description using the **${{ steps.generate.outputs.template-used }}** template. 
        
        Feel free to review and adjust anything that needs tweaking!
        
        ---
        *âœ¨ Generated with AI assistance*"

        # Escape for JSON
        COMMENT_JSON=$(echo "$COMMENT_BODY" | jq -Rs .)
        
        curl -X POST \
          -H "Authorization: token $GITHUB_TOKEN" \
          -H "Accept: application/vnd.github.v3+json" \
          "$GITHUB_API_URL/repos/$GITHUB_REPOSITORY/issues/$PR_NUMBER/comments" \
          -d "{\"body\": $COMMENT_JSON}"
          
    - name: Add Error Comment
      if: steps.generate.outputs.content-generated != 'true'
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}
        PR_NUMBER: ${{ github.event.pull_request.number }}
      run: |
        COMMENT_BODY="ðŸ˜… **Oops! Template Generation Failed**
        
        Something went wrong while generating your PR template. Here are a few things to check:
        - Your AI provider API key is valid
        - There are actual code changes in this PR
        - Template files exist in the configured path
        
        ---
        *ðŸ¤– AI PR Template Generator*"

        COMMENT_JSON=$(echo "$COMMENT_BODY" | jq -Rs .)
        
        curl -X POST \
          -H "Authorization: token $GITHUB_TOKEN" \
          -H "Accept: application/vnd.github.v3+json" \
          "$GITHUB_API_URL/repos/$GITHUB_REPOSITORY/issues/$PR_NUMBER/comments" \
          -d "{\"body\": $COMMENT_JSON}"
        
    - name: Cleanup
      shell: bash
      run: |
        rm -f pr-template-output.md

branding:
  icon: 'git-pull-request'
  color: 'blue'